// <auto-generated/>
global using global::System;
interface ITask<T>
{
    public void Add(T i);
    public bool Delete(T i);
    public void Watch(int i);
}
public class Vector<T> : ITask<T>
{
    private T[] _mas;
    private int _length;
    public Vector(int length)
    {
        _length = length;
        _mas = new T[length];
    }
    public Vector(T[] mas)
    {
        int length = mas.Length;
        _length = mas.Length;
        _mas = new T[_length];
        for (int i = 0; i < _length; i++)
        {
            _mas[i] = mas[i];
        }
    }
    public int getLength()
    {
        return _length;
    }
    public void setMas(int i, T value)
    {
        if (i < _length)
        {
            _mas[i] = value;
        }
    }
    public T getMas(int i)
    {
        return _mas[i];
    }
    public void Add(T i)
    {
        if (Convert.ToInt32(i) < 0)
        {
            throw new Exception("Cannot add negative value");
        }
        T[] newArr = new T[_length + 1];
        for (int j = 0; j < _length; j++)
        {
            newArr[j] = _mas[j];
        }
        newArr[_length] = i;
        _mas = newArr;
        _length++;
    }
    public bool Delete(T j)
    {
        bool found = false;
        T[] newArr = new T[_length - 1];
        for (int i = 0, k = 0; i < _length; i++)
        {
            if (_mas[i].Equals(j))
            {
                found = true;
                continue;
            }
            else
            {
                newArr[k] = _mas[i];
                k++;
            }
        }
        if (found)
        {
            _mas = newArr;
            _length--;
        }
        else
        {
            throw new Exception("Such element not found");
        }
        return found;
    }
    public void Watch(int j)
    {
        Console.WriteLine(_mas[j]);
    }
    public static Vector<T> operator +(Vector<T> left, Vector<T> right)
    {
        int length = 0;
        Vector<T> bigger = null;
        Vector<T> smaller = null;
        if (left._length > right._length)
        {
            bigger = left;
            smaller = right;
            length = left._length;
        }
        else
        {
            bigger = right;
            smaller = left;
            length = right._length;
        }
        Vector<T> newVector = new Vector<T>(length);
        for (int i = 0; i < length; i++)
        {
            if (i < smaller._length)
            {
                newVector.setMas(i, bigger.getMas(i));
            }
            else
            {
                newVector.setMas(i, bigger.getMas(i));
            }
        }
        return newVector;
    }
    public static bool operator >(Vector<T> left, Vector<T> right)
    {
        if (left._length > right._length)
        {
            return true;
        }
        else if (left._length < right._length)
        {
            return false;
        }
        else
        {
            for (int i = 0; i < left._length; i++)
            {
                if (Convert.ToInt32(left.getMas(i)) > Convert.ToInt32(right.getMas(i)))
                {
                    return true;
                }
                else if (Convert.ToInt32(left.getMas(i)) < Convert.ToInt32(right.getMas(i)))
                {
                    return false;
                }
            }
            return false;
        }
    }
    public static bool operator <(Vector<T> left, Vector<T> right)
    {
        if (left._length < right._length)
        {
            return true;
        }
        else if (left._length > right._length)
        {
            return false;
        }
        else
        {
            for (int i = 0; i < left._length; i++)
            {
                if (Convert.ToInt32(left.getMas(i)) < Convert.ToInt32(right.getMas(i)))
                {
                    return true;
                }
                else if (Convert.ToInt32(left.getMas(i)) > Convert.ToInt32(right.getMas(i)))
                {
                    return false;
                }
            }
            return false;
        }
    }
    public static Vector<T> operator ==(Vector<T> left, Vector<T> right)
    {
        Vector<T> newVector = new Vector<T>(right._length);
        for (int i = 0; i < right._length; i++)
        {
            newVector.setMas(i, right.getMas(i));
        }
        left = newVector;
        return newVector;
    }
    public static Vector<T> operator !=(Vector<T> left, Vector<T> right)
    {
        Vector<T> newVector = new Vector<T>(right._length);
        for (int i = 0; i < right._length; i++)
        {
            newVector.setMas(i, right.getMas(i));
        }
        left = newVector;
        return newVector;
    }
    public override bool Equals(object o)
    {
        Vector<T> right = (Vector<T>)o;
        if (ReferenceEquals(this, right))
        {
            return true;
        }
        else if (_length != right._length)
        {
            return false;
        }
        else
        {
            for (int i = 0; i < _length; i++)
            {
                if (!_mas[i].Equals(right.getMas(i)))
                {
                    return false;
                }
            }
            return true;
        }
    }
    public override int GetHashCode()
    {
        int hash = 0;
        for (int i = 0; i < _length; i++)
        {
            hash += Convert.ToInt32(_mas[i]);
        }
        hash /= _length;
        return hash;
    }
    public static bool operator true(Vector<T> vector)
    {
        if (vector._length == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    public static bool operator false(Vector<T> vector)
    {
        if (vector._length == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void WriteVector()
    {
        if (_length == 0)
        {
            Console.WriteLine("vector is empty");
            return;
        }
        string str = "";
        for (int i = 0; i < _length; i++)
        {
            str += Convert.ToString(_mas[i]) + "\n";
        }
        Console.WriteLine(str);
    }
    public void WriteFile(string path)
    {
        string[] arr = new string[_length];
        for (int i = 0; i < _length; i++)
        {
            arr[i] = _mas[i].ToString();
        }
        File.AppendAllLines(path, arr);
    }
    public string[] ReadFile(string path)
    {
        string[] arr = File.ReadAllText(path).Split('\n');
        return arr;
    }
    public class Owner
    {
        private int _id;
        private string _name;
        private string _org;
        public Owner(int id, string name, string org)
        {
            _id = id;
            _name = name;
            _org = org;
        }
        public void WriteOwner()
        {
            Console.WriteLine($"{_id} {_name} {_org}");
        }
    }
    public class Date
    {
        private DateTime _date;
        public Date()
        {
            _date = DateTime.Now;
        }
        public void WriteDate()
        {
            Console.WriteLine(_date.ToString());
        }
    }
}

class Program
{
    static void Main()
    {
        try
        {
            int[] mas1 = { 1, 2, 3 };
            Vector<int> vector1 = new Vector<int>(mas1);
            //vector1.Add(-1);
            vector1.WriteVector();
            double[] mas2 = { -4.4532, 5.6756e5, -6.2343 };
            Vector<double> vector2 = new Vector<double>(mas2);
            vector2.WriteVector();
            Console.WriteLine(vector1.GetHashCode());
            if (vector1)
            {
                Console.WriteLine("vector1 isn't empty");
            }
            else
            {
                Console.WriteLine("vector1 is empty");
            }
            string[] str = { "qwe", "rty" };
            Vector<string> vector3 = new Vector<string>(str);
            vector3.WriteVector();
            Sailship[] sail = { new(1, 2), new(), new(10, 123), new(20, 34), new(69, 1488) };
            Vector<Sailship> vector4 = new Vector<Sailship>(sail);
            vector4.WriteVector();
            vector3.WriteFile("D:\\_УЧЁБА_\\Лабораторные работы\\OOP-3-term\\oop-07\\oop-07\\text.txt");
            Vector<string> vector5 = new Vector<string>
                (vector1.ReadFile("D:\\_УЧЁБА_\\Лабораторные работы\\OOP-3-term\\oop-07\\oop-07\\text.txt"));
            Console.WriteLine("vector5");
            vector5.WriteVector();
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            Console.WriteLine("finally");
        }
    }
}